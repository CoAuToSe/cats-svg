'Element';' Description';' Attributes'
'<a>';' Creates a link around SVG elements xlink:show\nxlink:actuate\nxlink:href\ntarget'
'<altGlyph>';' Provides control over the glyphs used to render particular character data ';'x\ny\ndx\ndy\nrotate\nglyphRef\nformat\nxlink:href'
'<altGlyphDef>';' Defines a substitution set for glyphs ';'id'
'<altGlyphItem>';' Defines a candidate set of glyph substitutions ';'id'
'<animate>';' Defines how an attribute of an element changes over time ';'attributeName="the name of the target attribute"\nby="a relative offset value"\nfrom="the starting value"\nto="the ending value"\ndur="the duration"\nrepeatCount="the number of time the animation will take place"'
'<animateMotion>';' Causes a referenced element to move along a motion path ';'calcMode="the interpolation mode for the animation. Can be 'discrete', 'linear', 'paced', 'spline'"\npath="the motion path"\nkeyPoints="how far along the motion path the object shall move at the moment in time"\nrotate="applies a rotation transformation"\nxlink:href="an URI reference to the <path> element which defines the motion path"'
'<animateTransform>';' Animates a transformation attribute on a target element, thereby allowing animations to control translation, scaling, rotation and/or skewing ';'by="a relative offset value"\nfrom="the starting value"\nto="the ending value"\ntype="the type of transformation which is to have its values change over time. Can be 'translate', 'scale', 'rotate', 'skewX', 'skewY'"'
'<circle>';' Defines a circle ';'cx="the x-axis center of the circle"\ncy="the y-axis center of the circle"\nr="The circle's radius". Required.\n\n+ presentation attributes:\nColor, FillStroke, Graphics'
'<clipPath>';' Clipping is about hiding what normally would be drawn. The stencil which defines what is and what isn't drawn is called a clipping path clip-path="the referenced clipping path is intersected with the referencing clipping path"\nclipPathUnits="'userSpaceOnUse' or 'objectBoundingBox'. The second value makes units of children a fraction of the object bounding box which uses the mask (default: 'userSpaceOnUse')"'
'<color-profile>';' Specifies a color profile description (when the document is styled using CSS) local="the unique ID for a locally stored color profile"\nname=""\nrendering-intent="auto|perceptual|relative-colorimetric|saturation|absolute-colorimetric"\nxlink:href="the URI of an ICC profile resource"'
'<cursor>';' Defines a platform-independent custom cursor x="the x-axis top-left corner of the cursor (default is 0)"\ny="the y-axis top-left corner of the cursor (default is 0)"\nxlink:href="the URI of the image to use as the cursor'
'<defs>';' A container for referenced elements'
'<desc>';' A text-only description for container elements or graphic elements in SVG (user agents may display the text as a tooltip)'
'<ellipse>';' Defines an ellipse cx="the x-axis center of the ellipse"\ncy="the y-axis center of the ellipse"\nrx="the length of the ellipse's radius along the x-axis". Required.\nry="the length of the ellipse's radius along the y-axis". Required.\n\n+ presentation attributes:\nColor, FillStroke, Graphics'
'<feBlend>';' Composes two objects together according to a certain blending mode mode="the image blending modes: normal|multiply|screen|darken|lighten"\nin="identifies input for the given filter primitive: SourceGraphic | SourceAlpha | BackgroundImage | BackgroundAlpha | FillPaint | StrokePaint | <filter-primitive-reference>"\nin2="the second input image to the blending operation"'
'feColorMatrix ';'SVG filter. ';'Applies a matrix transformation'
'feComponentTransfer ';'SVG filter. ';'Performs component-wise remapping of data'
'feComposite ';'SVG filter.';''
'feConvolveMatrix ';'SVG filter.';''
'feDiffuseLighting ';'SVG filter.';''
'feDisplacementMap ';'SVG filter.';''
'feDistantLight ';'SVG filter. ';'Defines a light source'
'feFlood ';'SVG filter.';''
'feFuncA ';'SVG filter. ';'Sub-element to feComponentTransfer'
'feFuncB ';'SVG filter. ';'Sub-element to feComponentTransfer'
'feFuncG ';'SVG filter. ';'Sub-element to feComponentTransfer'
'feFuncR ';'SVG filter. ';'Sub-element to feComponentTransfer'
'feGaussianBlur ';'SVG filter. ';'Performs a Gaussian blur on the image'
'feImage ';'SVG filter.';''
'feMerge ';'SVG filter. ';'Creates image layers on top of each other'
'feMergeNode ';'SVG filter. ';'Sub-element to feMerge'
'feMorphology ';'SVG filter. ';'Performs a "fattening" or "thinning" on a source graphic'
'feOffset ';'SVG filter. ';'Moves an image relative to its current position'
'fePointLight ';'SVG filter.';''
'feSpecularLighting ';'SVG filter.';''
'feSpotLight ';'SVG filter.';''
'feTile ';'SVG filter.';''
'feTurbulence ';'SVG filter.';''
'filter ';'Container for filter effects';''
'font ';'Defines a font';''
'font-face ';'Describes the characteristics of a font';''
'font-face-format';'';''
'font-face-name';'';''
'font-face-src';'';''
'font-face-uri';'';''
'foreignObject';'';''
'<g>';' Used to group together elements id="the name of the group"\nfill="the fill color for the group"\nopacity="the opacity for the group"\n\n+ presentation attributes:\nAll'
'glyph ';'Defines the graphics for a given glyph';''
'glyphRef ';'Defines a possible glyph to use';''
'hkern';'';''
'<image>';' Defines an image x="the x-axis top-left corner of the image"\ny="the y-axis top-left corner of the image"\nwidth="the width of the image". Required.\nheight="the height of the image". Required.\nxlink:href="the path to the image". Required.\n\n+ presentation attributes:\nColor, Graphics, Images, Viewports'
'<line>';' Defines a line x1="the x start point of the line"\ny1="the y start point of the line"\nx2="the x end point of the line"\ny2="the y end point of the line"\n\n+ presentation attributes:\nColor, FillStroke, Graphics, Markers'
'<linearGradient>';' Defines a linear gradient. Linear gradients fill the object by using a vector, and can be defined as horizontal, vertical or angular gradients. id="the unique id used to reference this pattern. Required to reference it"\ngradientUnits="'userSpaceOnUse' or 'objectBoundingBox'. Use the view box or object to determine relative position of vector points. (Default 'objectBoundingBox')"\ngradientTransform="the transformation to apply to the gradient"\nx1="the x start point of the gradient vector (number or % - 0% is default)"\ny1="the y start point of the gradient vector. (0% default)"\nx2="the x end point of the gradient vector. (100% default)"\ny2="the y end point of the gradient vector. (0% default)"\nspreadMethod="'pad' or 'reflect' or 'repeat'"\nxlink:href="reference to another gradient whose attribute values are used as defaults and stops included. Recursive"'
'<marker>';' Markers can be placed on the vertices of lines, polylines, polygons and paths. These elements can use the marker attributes "marker-start", "marker-mid" and "marker-end"' which inherit by default or can be set to 'none' or the URI of a defined marker. You must first define the marker before you can reference it via its URI. Any kind of shape can be put inside marker. They are drawn on top of the element they are attached to markerUnits="'strokeWidth' or 'userSpaceOnUse'. If 'strokeWidth' is used then one unit equals one stroke width. Otherwise, the marker does not scale and uses the the same view units as the referencing element (default 'strokeWidth')"\nrefx="the position where the marker connects with the vertex (default 0)"\nrefy="the position where the marker connects with the vertex (default 0)"\norient="'auto' or an angle to always show the marker at. 'auto' will compute an angle that makes the x-axis a tangent of the vertex (default 0)"\nmarkerWidth="the width of the marker (default 3)"\nmarkerHeight="the height of the marker (default 3)"\nviewBox="the points "seen" in this SVG drawing area. 4 values separated by white space or commas. (min x, min y, width, height)"\n\n+ presentation attributes:\nAll'
'<mask>';' Masking is a combination of opacity values and clipping. Like clipping you can use shapes, text or paths to define sections of the mask. The default state of a mask is fully transparent which is the opposite of clipping plane. The graphics in a mask sets how opaque portions of the mask are maskUnits="'userSpaceOnUse' or 'objectBoundingBox'. Set whether the clipping plane is relative the full view port or object (default: 'objectBoundingBox')"\nmaskContentUnits="Use the second with percentages to make mask graphic positions relative the object. 'userSpaceOnUse' or 'objectBoundingBox' (default: 'userSpaceOnUse')"\nx="the clipping plane of the mask (default: -10%)"\ny="the clipping plane of the mask (default: -10%)"\nwidth="the clipping plane of the mask (default: 120%)"\nheight="the clipping plane of the mask (default: 120%)"'
'metadata ';'Specifies metadata';''
'missing-glyph';'';''
'mpath';'';''
'<path>';' Defines a path d="a set of commands which define the path"\npathLength="If present, the path will be scaled so that the computed path length of the points equals this value"\ntransform="a list of transformations"\n\n+ presentation attributes:\nColor, FillStroke, Graphics, Markers'
'<pattern>';' Defines the coordinates you want the view to show and the size of the view. Then you add shapes into your pattern. The pattern repeats when an edge of the view box (viewing area) is hit id="the unique id used to reference this pattern." Required.\npatternUnits="'userSpaceOnUse' or 'objectBoundingBox'. The second value makes units of x, y, width, height a fraction (or %) of the object bounding box which uses the pattern."\npatternContentUnits="'userSpaceOnUse' or 'objectBoundingBox'"\npatternTransform="allows the whole pattern to be transformed"\nx="pattern's offset from the top-left corner (default 0)"\ny="pattern's offset from the top-left corner. (default 0)"\nwidth="the width of the pattern tile (default 100%)"\nheight="the height of the pattern tile (default 100%)"\nviewBox="the points "seen" in this SVG drawing area. 4 values separated by white space or commas. (min x, min y, width, height)"\nxlink:href="reference to another pattern whose attribute values are used as defaults and any children are inherited. Recursive"\n '
'<polygon>';' Defines a graphic that contains at least three sides points="the points of the polygon. The total number of points must be even". Required.\nfill-rule="part of the FillStroke presentation attributes"\n\n+ presentation attributes:\nColor, FillStroke, Graphics, Markers'
'<polyline>';' Defines any shape that consists of only straight lines points="the points on the polyline". Required.\n\n+ presentation attributes:\nColor, FillStroke, Graphics, Markers'
'<radialGradient>';' Defines a radial gradient. Radial gradients are created by taking a circle and smoothly changing values between gradient stops from the focus point to the outside radius. gradientUnits="'userSpaceOnUse' or 'objectBoundingBox'. Use the view box or object to determine relative position of vector points. (Default 'objectBoundingBox')"\ngradientTransform="the transformation to apply to the gradient"\ncx="the center point of the gradient (number or % - 50% is default)"\ncy="the center point of the gradient. (50% default)"\nr="the radius of the gradient. (50% default)"\nfx="the focus point of the gradient. (0% default)"\nfy="The focus point of the gradient. (0% default)"\nspreadMethod="'pad' or 'reflect' or 'repeat'"\nxlink:href="Reference to another gradient whose attribute values are used as defaults and stops included. Recursive"'
'<rect>';' Defines a rectangle x="the x-axis top-left corner of the rectangle"\ny="the y-axis top-left corner of the rectangle"\nrx="the x-axis radius (to round the element)"\nry="the y-axis radius (to round the element)"\nwidth="the width of the rectangle". Required.\nheight="the height of the rectangle" Required.\n\n+ presentation attributes:\nColor, FillStroke, Graphics'
'script';' Container for scripts (e.g., ECMAScript)';''
'set';' Sets the value of an attribute for a specified duration';''
'<stop>';' The stops for a gradient offset="the offset for this stop (0 to 1/0% to 100%)". Required.\nstop-color="the color of this stop"\nstop-opacity="the opacity of this stop (0 to 1)"
style';' Allows style sheets to be embedded directly within SVG content';''
'<svg>';' Creates an SVG document fragment x="top left corner when embedded (default 0)"\ny="top left corner when embedded (default 0)"\nwidth="the width of the svg fragment (default 100%)"\nheight="the height of the svg fragment (default 100%)"\nviewBox="the points "seen" in this SVG drawing area. 4 values separated by white space or commas. (min x, min y, width, height)"\npreserveAspectRatio="'none' or any of the 9 combinations of 'xVALYVAL' where VAL is 'min', 'mid' or 'max'. (default xMidYMid)"\nzoomAndPan="'magnify' or 'disable'. Magnify option allows users to pan and zoom your file (default magnify)"\nxml="outermost <svg> element needs to setup SVG and its namespace: xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve""\n\n+ presentation attributes:\nAll'
'switch';'';''
'symbol';'';''
'<text>';' Defines a text x="a list of x-axis positions. The nth x-axis position is given to the nth character in the text. If there are additional characters after the positions run out they are placed after the last character. 0 is default"\ny="a list of y-axis positions. (see x). 0 is default"\ndx="a list of lengths which moves the characters relative to the absolute position of the last glyph drawn. (see x)"\ndy="a list of lengths which moves the characters relative to the absolute position of the last glyph drawn. (see x)"\nrotate="a list of rotations. The nth rotation is performed on the nth character. Additional characters are NOT given the last rotation value"\ntextLength="a target length for the text that the SVG viewer will attempt to display the text between by adjusting the spacing and/or the glyphs. (default: The text's normal length)"\nlengthAdjust="tells the viewer what to adjust to try to accomplish rendering the text if the length is specified. The two values are 'spacing' and 'spacingAndGlyphs'"\n\n+ presentation attributes:\nColor, FillStroke, Graphics, FontSpecification, TextContentElements'
'textPath';'';''
'title';' A text-only description for elements in SVG - not displayed as part of the graphics. User agents may display the text as a tooltip';''
'<tref>';' References any <text> element in the SVG document and reuse it Identical to the <text> element'
'<tspan>';' Identical to the <text> element but can be nested inside text tags and inside itself Identical to the <text> element\n+ in addition:\nxlink:href="Reference to a <text> element"'
'<use>';' Uses a URI to reference a <g>, <svg> or other graphical element with a unique id attribute and replicate it. The copy is only a reference to the original so only the original exists in the document. Any change to the original affects all copies. x="the x-axis top-left corner of the cloned element"\ny="the y-axis top-left corner of the cloned element"\nwidth="the width of the cloned element"\nheight="the height of the cloned element"\nxlink:href="a URI reference to the cloned element"\n\n+ presentation attributes:\nAll'
'view';'';''
'vkern';'';'';